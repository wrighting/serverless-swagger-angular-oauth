# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: wrighting-example-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment:
    DB_USER: ${file(../config/config.${self:provider.stage}.json):db_user}
    DATABASE: ${file(../config/config.${self:provider.stage}.json):database}
    DB_PASSWORD: ${file(../config/config.${self:provider.stage}.json):db_password}
    DB_HOST: ${cf:wrighting-example-service-infra-${self:provider.stage}.DbHostOutput}
    AUTH_PROFILE_URL: ${file(../config/config.${self:provider.stage}.json):auth_profile}
    CREATE_SCHEMA_IF_MISSING: ${file(../config/config.${self:provider.stage}.json):create_schema_if_missing}
  vpc:
    securityGroupIds:
      - ${cf:wrighting-example-service-infra-${self:provider.stage}.ServerlessSecurityGroupOutput}
    subnetIds:
      - 'Fn::ImportValue': wrighting-example-service-infra:PublicSubnetA-${self:provider.stage}
      - 'Fn::ImportValue': wrighting-example-service-infra:PublicSubnetB-${self:provider.stage}
  apiGateway:
    restApiId: ${cf:wrighting-example-service-infra-${self:provider.stage}.ApiGatewayRestApi}
    restApiRootResourceId: ${cf:wrighting-example-service-infra-${self:provider.stage}.ApiGatewayRestApiRootResource}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

plugins:
      - serverless-python-requirements

custom:
      pythonRequirements:
              dockerizePip: true

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
package:
    exclude:
        - requirements.txt
        - serverless.yml
        - node_modules/**
        - package.json
        - package-lock.json
        - config/**
    include:
        - example/handler.py
        - ../../swagger/python-flask/**/**
        - ../../common/example_server/**/**
        - ../../database/schema.psql
        - auth/**
        - ../util/**

functions:

  create_example:
    handler: example/handler.create_example
    events:
      - http:
          path: example-service/v1/example
          method: post
          cors: true
          authorizer:
            arn: ${cf:wrighting-example-service-infra-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*

  example:
    handler: example/handler.download_example
    events:
      - http:
          path: example-service/v1/example/{example_id}
          method: get
          cors: true
          authorizer:
            arn: ${cf:wrighting-example-service-infra-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              paths:
                example_id: true

  examples:
    handler: example/handler.download_examples
    events:
      - http:
          path: example-service/v1/examples
          method: get
          cors: true
          authorizer:
            arn: ${cf:wrighting-example-service-infra-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              query:
                study_name: true
                start: false
                count: false
                orderby: false

  update_example:
    handler: example/handler.update_example
    events:
      - http:
          path: example-service/v1/example/{example_id}
          method: put
          cors: true
          authorizer:
            arn: ${cf:wrighting-example-service-infra-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
              parameters:
                  paths:
                      example_id: true

  delete_example:
    handler: example/handler.delete_example
    events:
      - http:
          path: example-service/v1/example/{example_id}
          method: delete
          cors: true
          authorizer:
            arn: ${cf:wrighting-example-service-infra-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              paths:
                example_id: true

resources:
  Resources:
    CreateUnderscoreexampleLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    ExampleLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    ExamplesLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    UpdateUnderscoreexampleLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    DeleteUnderscoreexampleLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
